// Code generated by mockery v2.23.2. DO NOT EDIT.

package dbmocks

import (
	model "authentication/cmd/model"

	mock "github.com/stretchr/testify/mock"
)

// UserInterface is an autogenerated mock type for the UserInterface type
type UserInterface struct {
	mock.Mock
}

// GetInfoByEmail provides a mock function with given fields: email
func (_m *UserInterface) GetInfoByEmail(email string) (*model.User, error) {
	ret := _m.Called(email)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchPassword provides a mock function with given fields: password
func (_m *UserInterface) MatchPassword(password string) bool {
	ret := _m.Called(password)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewUserInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserInterface creates a new instance of UserInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserInterface(t mockConstructorTestingTNewUserInterface) *UserInterface {
	mock := &UserInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
